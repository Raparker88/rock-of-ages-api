name: Build and Deploy Django App

on:
  push:
    branches: [main]
  workflow_dispatch:  # Enables manual trigger from GitHub UI

permissions:
  id-token: write       # Required for GitHub OIDC to work
  contents: read        # Required to checkout code

jobs:
  build-test-push:
    name: Build & Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}  

      # test step to add later
      # - name: Run tests (Django)
      #   run: |
      #     docker run --rm ${{ secrets.ECR_REPOSITORY }} python manage.py test

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          IMAGE="${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"


  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-test-push
    if: github.event_name == 'workflow_dispatch'  # Only allow manual triggers

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ vars.OIDC_ROLE_TO_ASSUME }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ vars.ECR_REPOSITORY }} .

    - name: Tag and push image to ECR
      run: |
        IMAGE_URI=${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest
        docker tag ${{ vars.ECR_REPOSITORY }}:latest $IMAGE_URI
        docker push $IMAGE_URI

    - name: Trigger remote deployment on EC2 via SSM
      run: |
        aws ssm send-command \
          --instance-ids "${{ vars.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy updated Docker image" \
          --parameters commands='
            IMAGE="${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest"
            docker pull "$IMAGE"
            if [ $? -eq 0 ]; then
              docker stop my-app || true
              docker rm my-app || true
              docker run -d --name my-app -p 80:8000 "$IMAGE"
            else
              echo "Docker pull failed. Aborting deployment."
              exit 1
            fi
          ' \
          --region ${{ vars.AWS_REGION }}