name: Build, Test, & Push Docker Image

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: echo "image_tag=myapp:latest" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Save Docker image as artifact
        run: docker save myapp:latest -o myapp-latest.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: myapp-latest.tar

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i myapp-latest.tar

      - name: Run tests inside Docker container
        run: docker run --rm myapp:latest pipenv run python manage.py test

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i myapp-latest.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push Docker image to ECR
        run: |
          IMAGE="${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest"
          docker tag myapp:latest "$IMAGE"
          docker push "$IMAGE"
